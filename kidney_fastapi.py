# -*- coding: utf-8 -*-
"""Kidney-FastAPI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nFvPDJDU1urvse8_lWreYYAxKEGWbV8f
"""

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import numpy as np
from PIL import Image
import tensorflow as tf
import io
import os

# FastAPI app initialization
app = FastAPI(
    title="AI Medical Assistant - Kidney CT Classifier",
    description="Upload a kidney CT image and get predictions from AI",
    version="1.0"
)

# Allow CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Model Handling (local only)
local_model_path = 'Kidney_CT_Classifier_clean_dense.h5'

if not os.path.exists(local_model_path):
    raise FileNotFoundError(f"Model file not found at {local_model_path}")

# Load model
model = tf.keras.models.load_model(local_model_path)
class_names = ["Normal", "Stone"]

# Helper function
def preprocess_image(image_bytes):
    img = Image.open(io.BytesIO(image_bytes)).convert("L")  # grayscale
    img = img.resize((224, 224))
    img_array = np.array(img, dtype=np.float32) / 255.0
    img_array = np.expand_dims(img_array, axis=(0, -1))  # (1,224,224,1)
    return img_array

# Prediction Endpoint
@app.post("/predict")
async def predict_kidney(file: UploadFile = File(...)):
    if file.content_type not in ["image/jpeg", "image/png", "image/jpg"]:
        raise HTTPException(status_code=400, detail="Invalid file type. Only jpg/png allowed.")

    image_bytes = await file.read()
    img_array = preprocess_image(image_bytes)

    predictions = model.predict(img_array)
    pred_idx = int(np.argmax(predictions))
    predicted_class = class_names[pred_idx]
    confidence = float(np.max(predictions)) * 100

    response = {
        "prediction": predicted_class,
        "confidence": f"{confidence:.2f}%",
        "message": "Normal kidney" if predicted_class == "Normal" else "Possible kidney stone detected"
    }

    return JSONResponse(content=response)

# Root Endpoint
@app.get("/")
def read_root():
    return {"message": "Welcome to AI Medical Assistant - Kidney CT Classifier"}